{
    "AI Python Function Documentation": {
        "prefix": "aidocpy",
        "body": [
            "def ${1:function_name}(${2:params}) -> ${3:return_type}:",
            "    \"\"\"",
            "    AI DOCUMENTATION REQUEST",
            "    ",
            "    ${4:Brief description of what this function does}",
            "    ",
            "    Args:",
            "        ${5:param_name} (${6:param_type}): ${7:Parameter description}",
            "    ",
            "    Returns:",
            "        ${3:return_type}: ${8:Return value description}",
            "    ",
            "    Raises:",
            "        ${9:ExceptionType}: ${10:When this exception is raised}",
            "    ",
            "    Example:",
            "        >>> ${11:usage_example}",
            "        ${12:expected_output}",
            "    ",
            "    AI Tool: ${13|gemini,claude,copilot|}",
            "    AI Task: documentation",
            "    \"\"\"",
            "    ${14:# Implementation}",
            "    $0"
        ],
        "description": "Python function with AI documentation request"
    },
    
    "AI Python Class": {
        "prefix": "aiclass",
        "body": [
            "class ${1:ClassName}:",
            "    \"\"\"",
            "    AI DOCUMENTATION & REVIEW REQUEST",
            "    ",
            "    ${2:Class description}",
            "    ",
            "    Attributes:",
            "        ${3:attribute_name} (${4:type}): ${5:Attribute description}",
            "    ",
            "    AI Tool: ${6|claude,gemini,copilot|}",
            "    AI Tasks: documentation, code-review, best-practices",
            "    \"\"\"",
            "    ",
            "    def __init__(self, ${7:params}):",
            "        \"\"\"",
            "        Initialize ${1:ClassName}.",
            "        ",
            "        Args:",
            "            ${8:param_name} (${9:type}): ${10:Parameter description}",
            "        \"\"\"",
            "        ${11:# Constructor implementation}",
            "        $0",
            "    ",
            "    def ${12:method_name}(self, ${13:params}) -> ${14:return_type}:",
            "        \"\"\"",
            "        ${15:Method description}",
            "        ",
            "        Args:",
            "            ${16:param_name} (${17:type}): ${18:Parameter description}",
            "        ",
            "        Returns:",
            "            ${14:return_type}: ${19:Return description}",
            "        \"\"\"",
            "        ${20:# Method implementation}",
            "        pass"
        ],
        "description": "Python class with AI documentation request"
    },
    
    "AI Python Test": {
        "prefix": "aitestpy",
        "body": [
            "import unittest",
            "from unittest.mock import Mock, patch",
            "",
            "# AI TEST GENERATION REQUEST",
            "# Target: ${1:target_module_or_function}",
            "# Framework: unittest/pytest",
            "# AI Tool: ${2|codex,claude,gemini|}",
            "",
            "class Test${3:ClassName}(unittest.TestCase):",
            "    \"\"\"",
            "    AI-Generated Test Suite for ${1:target_module_or_function}",
            "    ",
            "    Test Requirements:",
            "    - Happy path scenarios",
            "    - Edge cases and boundary conditions",
            "    - Error handling and exceptions",
            "    - Mock external dependencies",
            "    - Performance considerations",
            "    \"\"\"",
            "    ",
            "    def setUp(self):",
            "        \"\"\"Set up test fixtures before each test method.\"\"\"",
            "        ${4:# Setup code}",
            "        pass",
            "    ",
            "    def tearDown(self):",
            "        \"\"\"Clean up after each test method.\"\"\"",
            "        ${5:# Cleanup code}",
            "        pass",
            "    ",
            "    def test_${6:happy_path}(self):",
            "        \"\"\"Test ${7:expected behavior description}.\"\"\"",
            "        # AI: Generate comprehensive happy path test",
            "        ${8:# Test implementation}",
            "        $0",
            "    ",
            "    def test_${9:edge_case}(self):",
            "        \"\"\"Test edge case: ${10:edge case description}.\"\"\"",
            "        # AI: Generate edge case test",
            "        ${11:# Edge case test implementation}",
            "        pass",
            "    ",
            "    def test_${12:error_condition}(self):",
            "        \"\"\"Test error handling: ${13:error condition description}.\"\"\"",
            "        # AI: Generate error condition test",
            "        with self.assertRaises(${14:ExpectedException}):",
            "            ${15:# Code that should raise exception}",
            "            pass",
            "",
            "if __name__ == '__main__':",
            "    unittest.main()"
        ],
        "description": "Python test class with AI generation request"
    },
    
    "AI Async Python Function": {
        "prefix": "aiasyncpy",
        "body": [
            "import asyncio",
            "from typing import ${1:Optional, List, Dict, Any}",
            "",
            "async def ${2:async_function_name}(${3:params}) -> ${4:return_type}:",
            "    \"\"\"",
            "    AI OPTIMIZATION REQUEST - Async Function",
            "    ",
            "    ${5:Function description}",
            "    ",
            "    Args:",
            "        ${6:param_name} (${7:type}): ${8:Parameter description}",
            "    ",
            "    Returns:",
            "        ${4:return_type}: ${9:Return description}",
            "    ",
            "    AI Tool: ${10|claude,codex,gemini|}",
            "    AI Focus: async-best-practices, error-handling, performance",
            "    \"\"\"",
            "    try:",
            "        # AI: Please optimize this async function for:",
            "        # - Proper async/await usage",
            "        # - Concurrent execution where beneficial",
            "        # - Timeout handling",
            "        # - Resource cleanup",
            "        # - Exception handling",
            "        ",
            "        ${11:# Implementation}",
            "        $0",
            "        ",
            "    except asyncio.TimeoutError:",
            "        ${12:# Handle timeout}",
            "        raise",
            "    except Exception as e:",
            "        ${13:# Handle other exceptions}",
            "        raise",
            "    finally:",
            "        ${14:# Cleanup code}",
            "        pass"
        ],
        "description": "Async Python function with AI optimization request"
    },
    
    "AI Data Analysis": {
        "prefix": "aidatapy",
        "body": [
            "import pandas as pd",
            "import numpy as np",
            "import matplotlib.pyplot as plt",
            "import seaborn as sns",
            "",
            "# AI DATA ANALYSIS REQUEST",
            "# Dataset: ${1:dataset_description}",
            "# Objective: ${2:analysis_objective}",
            "# AI Tool: ${3|claude,gemini,copilot|}",
            "",
            "def analyze_${4:dataset_name}(data_path: str) -> dict:",
            "    \"\"\"",
            "    AI-Assisted Data Analysis",
            "    ",
            "    Args:",
            "        data_path (str): Path to the dataset",
            "    ",
            "    Returns:",
            "        dict: Analysis results and insights",
            "    ",
            "    AI Tasks:",
            "    - Exploratory data analysis",
            "    - Statistical insights",
            "    - Visualization recommendations",
            "    - Data quality assessment",
            "    - Feature engineering suggestions",
            "    \"\"\"",
            "    ",
            "    # Load and inspect data",
            "    df = pd.read_csv(data_path)",
            "    ",
            "    # AI: Please analyze this dataset and provide:",
            "    # 1. Data quality assessment",
            "    print(f\"Dataset shape: {df.shape}\")",
            "    print(f\"Columns: {list(df.columns)}\")",
            "    print(f\"Data types:\\n{df.dtypes}\")",
            "    print(f\"Missing values:\\n{df.isnull().sum()}\")",
            "    ",
            "    # 2. Descriptive statistics",
            "    print(f\"Descriptive statistics:\\n{df.describe()}\")",
            "    ",
            "    # 3. Correlation analysis",
            "    numeric_cols = df.select_dtypes(include=[np.number]).columns",
            "    if len(numeric_cols) > 1:",
            "        plt.figure(figsize=(10, 8))",
            "        sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm')",
            "        plt.title('Correlation Matrix')",
            "        plt.show()",
            "    ",
            "    # 4. AI analysis request",
            "    analysis_results = {",
            "        'shape': df.shape,",
            "        'columns': list(df.columns),",
            "        'missing_values': df.isnull().sum().to_dict(),",
            "        'summary_stats': df.describe().to_dict(),",
            "        'data_types': df.dtypes.to_dict()",
            "    }",
            "    ",
            "    # AI: Based on this data analysis, please suggest:",
            "    # - Data cleaning steps",
            "    # - Feature engineering opportunities", 
            "    # - Potential modeling approaches",
            "    # - Visualization strategies",
            "    ",
            "    $0",
            "    return analysis_results"
        ],
        "description": "Data analysis function with AI assistance request"
    },
    
    "AI ML Model": {
        "prefix": "aimlpy",
        "body": [
            "from sklearn.model_selection import train_test_split, cross_val_score",
            "from sklearn.metrics import accuracy_score, classification_report",
            "from sklearn.preprocessing import StandardScaler",
            "import joblib",
            "",
            "# AI MACHINE LEARNING REQUEST",
            "# Problem Type: ${1|classification,regression,clustering|}",
            "# Dataset: ${2:dataset_description}",
            "# AI Tool: ${3|claude,codex,gemini|}",
            "",
            "class ${4:ModelName}:",
            "    \"\"\"",
            "    AI-Optimized Machine Learning Model",
            "    ",
            "    AI Tasks:",
            "    - Model selection and hyperparameter tuning",
            "    - Feature engineering recommendations",
            "    - Performance optimization",
            "    - Cross-validation strategy",
            "    - Model interpretation",
            "    \"\"\"",
            "    ",
            "    def __init__(self):",
            "        self.model = None",
            "        self.scaler = StandardScaler()",
            "        self.is_trained = False",
            "    ",
            "    def preprocess_data(self, X, y=None, fit_scaler=False):",
            "        \"\"\"",
            "        Preprocess the input data.",
            "        ",
            "        AI: Please optimize this preprocessing pipeline",
            "        \"\"\"",
            "        if fit_scaler:",
            "            X_scaled = self.scaler.fit_transform(X)",
            "        else:",
            "            X_scaled = self.scaler.transform(X)",
            "        ",
            "        return X_scaled",
            "    ",
            "    def train(self, X, y):",
            "        \"\"\"",
            "        Train the model.",
            "        ",
            "        AI: Please suggest optimal model selection and hyperparameters",
            "        \"\"\"",
            "        # Preprocess data",
            "        X_processed = self.preprocess_data(X, fit_scaler=True)",
            "        ",
            "        # Split data",
            "        X_train, X_val, y_train, y_val = train_test_split(",
            "            X_processed, y, test_size=0.2, random_state=42",
            "        )",
            "        ",
            "        # AI: Initialize and train your recommended model here",
            "        # Consider: RandomForest, XGBoost, SVM, Neural Networks",
            "        ${5:# Model initialization and training}",
            "        ",
            "        # Validate model",
            "        val_predictions = self.model.predict(X_val)",
            "        accuracy = accuracy_score(y_val, val_predictions)",
            "        print(f\"Validation Accuracy: {accuracy:.4f}\")",
            "        ",
            "        self.is_trained = True",
            "        return accuracy",
            "    ",
            "    def predict(self, X):",
            "        \"\"\"Make predictions on new data.\"\"\"",
            "        if not self.is_trained:",
            "            raise ValueError(\"Model must be trained before making predictions\")",
            "        ",
            "        X_processed = self.preprocess_data(X)",
            "        return self.model.predict(X_processed)",
            "    ",
            "    def save_model(self, filepath: str):",
            "        \"\"\"Save the trained model.\"\"\"",
            "        joblib.dump({",
            "            'model': self.model,",
            "            'scaler': self.scaler,",
            "            'is_trained': self.is_trained",
            "        }, filepath)",
            "    ",
            "    def load_model(self, filepath: str):",
            "        \"\"\"Load a saved model.\"\"\"",
            "        saved_data = joblib.load(filepath)",
            "        self.model = saved_data['model']",
            "        self.scaler = saved_data['scaler']",
            "        self.is_trained = saved_data['is_trained']",
            "",
            "# AI: Please analyze this ML pipeline and suggest improvements for:",
            "# - Model architecture",
            "# - Feature engineering",
            "# - Hyperparameter tuning",
            "# - Cross-validation strategy",
            "# - Performance metrics",
            "$0"
        ],
        "description": "Machine learning model class with AI optimization request"
    },
    
    "AI API Endpoint": {
        "prefix": "aiapi",
        "body": [
            "from fastapi import FastAPI, HTTPException, Depends",
            "from pydantic import BaseModel",
            "from typing import List, Optional",
            "",
            "# AI API OPTIMIZATION REQUEST",
            "# Endpoint: ${1:endpoint_description}",
            "# Framework: FastAPI",
            "# AI Tool: ${2|claude,codex,gemini|}",
            "",
            "app = FastAPI()",
            "",
            "class ${3:RequestModel}(BaseModel):",
            "    \"\"\"",
            "    AI: Please optimize this request model",
            "    - Add proper validation",
            "    - Include example values",
            "    - Add field descriptions",
            "    \"\"\"",
            "    ${4:field_name}: ${5:field_type}",
            "    ${6:optional_field}: Optional[${7:type}] = None",
            "",
            "class ${8:ResponseModel}(BaseModel):",
            "    \"\"\"",
            "    AI: Please optimize this response model",
            "    \"\"\"",
            "    ${9:response_field}: ${10:type}",
            "    status: str = \"success\"",
            "",
            "@app.${11|get,post,put,delete,patch|}(\"${12:/api/endpoint}\")",
            "async def ${13:endpoint_function}(",
            "    ${14:request_param}: ${3:RequestModel},",
            "    # Add dependencies here",
            ") -> ${8:ResponseModel}:",
            "    \"\"\"",
            "    ${15:Endpoint description}",
            "    ",
            "    AI Tool: ${2|claude,codex,gemini|}",
            "    AI Tasks:",
            "    - Input validation and sanitization",
            "    - Error handling and status codes",
            "    - Security considerations",
            "    - Performance optimization",
            "    - Documentation and examples",
            "    \"\"\"",
            "    try:",
            "        # AI: Please implement robust endpoint logic with:",
            "        # - Input validation",
            "        # - Business logic",
            "        # - Error handling",
            "        # - Logging",
            "        # - Security checks",
            "        ",
            "        ${16:# Implementation}",
            "        $0",
            "        ",
            "        return ${8:ResponseModel}(",
            "            ${9:response_field}=${17:response_value}",
            "        )",
            "        ",
            "    except ValueError as e:",
            "        raise HTTPException(status_code=400, detail=str(e))",
            "    except Exception as e:",
            "        raise HTTPException(status_code=500, detail=\"Internal server error\")"
        ],
        "description": "FastAPI endpoint with AI optimization request"
    }
}
