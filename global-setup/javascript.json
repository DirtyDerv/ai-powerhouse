{
    "AI Function Documentation": {
        "prefix": "aidocfn",
        "body": [
            "/**",
            " * AI-GENERATED DOCUMENTATION REQUEST",
            " * @function ${1:functionName}",
            " * @description ${2:Brief description of what this function does}",
            " * @param {${3:type}} ${4:paramName} - ${5:Parameter description}",
            " * @returns {${6:returnType}} ${7:Return value description}",
            " * @example",
            " * // ${8:Usage example}",
            " * const result = ${1:functionName}(${9:exampleParams});",
            " * @ai-tool ${10|gemini,claude,copilot|}",
            " * @ai-task documentation",
            " */",
            "function ${1:functionName}(${4:paramName}) {",
            "    ${11:// Implementation}",
            "    $0",
            "}"
        ],
        "description": "JavaScript function with AI documentation request"
    },
    
    "AI Class Documentation": {
        "prefix": "aidocclass",
        "body": [
            "/**",
            " * AI-GENERATED DOCUMENTATION REQUEST",
            " * @class ${1:ClassName}",
            " * @description ${2:Brief description of what this class does}",
            " * @ai-tool ${3|gemini,claude,copilot|}",
            " * @ai-task documentation",
            " */",
            "class ${1:ClassName} {",
            "    /**",
            "     * @constructor",
            "     * @param {${4:type}} ${5:paramName} - ${6:Parameter description}",
            "     */",
            "    constructor(${5:paramName}) {",
            "        ${7:// Constructor implementation}",
            "    }",
            "",
            "    /**",
            "     * @method ${8:methodName}",
            "     * @description ${9:Method description}",
            "     * @param {${10:type}} ${11:paramName} - ${12:Parameter description}",
            "     * @returns {${13:returnType}} ${14:Return description}",
            "     */",
            "    ${8:methodName}(${11:paramName}) {",
            "        ${15:// Method implementation}",
            "        $0",
            "    }",
            "}"
        ],
        "description": "JavaScript class with AI documentation request"
    },
    
    "AI Test Generation": {
        "prefix": "aitestjs",
        "body": [
            "// AI TEST GENERATION REQUEST",
            "// Target: ${1:functionOrClass}",
            "// Framework: ${2|jest,mocha,jasmine|}",
            "// AI Tool: ${3|copilot,claude,gemini|}",
            "",
            "describe('${1:functionOrClass}', () => {",
            "    // AI-GENERATED TESTS REQUESTED",
            "    // Test Requirements:",
            "    // [ ] Happy path scenarios",
            "    // [ ] Edge cases", 
            "    // [ ] Error conditions",
            "    // [ ] Boundary values",
            "    // [ ] Async behavior (if applicable)",
            "    ",
            "    beforeEach(() => {",
            "        ${4:// Setup code}",
            "    });",
            "    ",
            "    test('should ${5:describe expected behavior}', () => {",
            "        ${6:// Test implementation}",
            "        $0",
            "    });",
            "    ",
            "    test('should handle edge case: ${7:edge case description}', () => {",
            "        ${8:// Edge case test}",
            "    });",
            "    ",
            "    test('should throw error when ${9:error condition}', () => {",
            "        ${10:// Error condition test}",
            "    });",
            "});"
        ],
        "description": "JavaScript test suite with AI generation request"
    },
    
    "AI Async Function": {
        "prefix": "aiasync",
        "body": [
            "/**",
            " * AI OPTIMIZATION REQUEST - Async Function",
            " * @description ${1:Function description}",
            " * @ai-tool ${2|claude,copilot,gemini|}",
            " * @ai-focus error-handling,performance,best-practices",
            " */",
            "async function ${3:functionName}(${4:params}) {",
            "    try {",
            "        ${5:// AI: Please optimize this async function}",
            "        ${6:// Focus on error handling and performance}",
            "        $0",
            "    } catch (error) {",
            "        console.error(`Error in ${3:functionName}:`, error);",
            "        throw error;",
            "    }",
            "}"
        ],
        "description": "Async function with AI optimization request"
    },
    
    "AI React Component": {
        "prefix": "aireact",
        "body": [
            "import React from 'react';",
            "",
            "/**",
            " * AI COMPONENT ANALYSIS REQUEST",
            " * @component ${1:ComponentName}",
            " * @description ${2:Component description}",
            " * @ai-tool ${3|claude,gemini,copilot|}",
            " * @ai-focus performance,accessibility,best-practices",
            " */",
            "const ${1:ComponentName} = ({ ${4:props} }) => {",
            "    // AI: Please review this component for:",
            "    // - Performance optimizations",
            "    // - Accessibility improvements", 
            "    // - React best practices",
            "    // - PropTypes/TypeScript definitions",
            "    ",
            "    return (",
            "        <div className=\"${5:className}\">",
            "            ${6:// Component JSX}",
            "            $0",
            "        </div>",
            "    );",
            "};",
            "",
            "export default ${1:ComponentName};"
        ],
        "description": "React component with AI analysis request"
    },
    
    "AI API Function": {
        "prefix": "aiapi",
        "body": [
            "/**",
            " * AI API OPTIMIZATION REQUEST",
            " * @description ${1:API function description}",
            " * @param {string} ${2:endpoint} - API endpoint",
            " * @param {Object} ${3:options} - Request options",
            " * @returns {Promise<Object>} API response",
            " * @ai-tool ${4|claude,copilot,gemini|}",
            " * @ai-focus error-handling,retry-logic,caching",
            " */",
            "async function ${5:apiFunction}(${2:endpoint}, ${3:options} = {}) {",
            "    // AI: Please optimize this API function with:",
            "    // - Proper error handling",
            "    // - Retry logic for failed requests",
            "    // - Request/response caching",
            "    // - Timeout handling",
            "    // - Request deduplication",
            "    ",
            "    const config = {",
            "        method: '${6|GET,POST,PUT,DELETE,PATCH|}',",
            "        headers: {",
            "            'Content-Type': 'application/json',",
            "            ...${3:options}.headers",
            "        },",
            "        ...${3:options}",
            "    };",
            "    ",
            "    try {",
            "        const response = await fetch(${2:endpoint}, config);",
            "        ",
            "        if (!response.ok) {",
            "            throw new Error(`HTTP error! status: \\${response.status}`);",
            "        }",
            "        ",
            "        return await response.json();",
            "    } catch (error) {",
            "        console.error(`API request failed:`, error);",
            "        throw error;",
            "    }",
            "}"
        ],
        "description": "API function with AI optimization request"
    },
    
    "AI Performance Benchmark": {
        "prefix": "aiperf",
        "body": [
            "/**",
            " * AI PERFORMANCE ANALYSIS REQUEST",
            " * @description ${1:Performance test description}",
            " * @ai-tool ${2|copilot,claude,gemini|}",
            " * @ai-focus performance,optimization,benchmarking",
            " */",
            "function benchmark${3:FunctionName}() {",
            "    const iterations = ${4:1000};",
            "    const startTime = performance.now();",
            "    ",
            "    for (let i = 0; i < iterations; i++) {",
            "        ${5:// Function to benchmark}",
            "    }",
            "    ",
            "    const endTime = performance.now();",
            "    const duration = endTime - startTime;",
            "    ",
            "    console.log(`${3:FunctionName} benchmark:`, {",
            "        iterations,",
            "        totalTime: `\\${duration.toFixed(2)}ms`,",
            "        avgTime: `\\${(duration / iterations).toFixed(4)}ms`,",
            "        opsPerSecond: Math.round((iterations / duration) * 1000)",
            "    });",
            "    ",
            "    // AI: Please analyze these performance results and suggest optimizations",
            "    $0",
            "}"
        ],
        "description": "Performance benchmark with AI analysis request"
    }
}
